import tkinter as tk
from PIL import Image, ImageTk, ImageDraw


# --- Main Application Class ---
class LitLoomApp(tk.Tk):
    """
    An improved Tkinter application that replicates the LitLoom webpage design,
    featuring a welcome screen and a second page with a centered content area.
    This version is optimized to prevent lag on resize.
    """

    def __init__(self):
        super().__init__()

        # --- Window Configuration ---
        self.title("â—† LitLoom")
        self.geometry("800x600")
        self.minsize(600, 450)  # Set a minimum size

        # --- Page State Management ---
        self.current_page = "welcome"

        # --- Optimization for Resizing ---
        self.resize_job_id = None
        self.last_width = 0
        self.last_height = 0

        # --- Button Colors for Animation ---
        self.button_bg_color = "#A6876D"
        self.button_hover_color = "#92755E"

        # --- Image Loading ---
        self.original_fg_image = None
        self.original_bg_image = None
        self.original_logo_image = None
        self.original_title_image = None
        self.fg_photo = None
        self.bg_photo = None
        self.logo_photo = None
        self.title_photo = None

        try:
            # Load the main image (person reading)
            self.original_fg_image = Image.open("background.jpeg")
        except FileNotFoundError:
            print("Error: 'background.jpeg' not found. A fallback will be used.")
            self.original_fg_image = Image.new('RGB', (800, 600), (200, 200, 220))
            draw = ImageDraw.Draw(self.original_fg_image)
            draw.text((300, 300), "Foreground Image Not Found", fill=(0, 0, 0))

        try:
            # Load the background texture image
            self.original_bg_image = Image.open("bg.jpeg")
        except FileNotFoundError:
            print("Error: 'bg.jpeg' not found. A fallback will be used.")
            self.original_bg_image = Image.new('RGB', (800, 600), (240, 230, 220))
            draw = ImageDraw.Draw(self.original_bg_image)
            draw.text((300, 300), "Background Image Not Found", fill=(0, 0, 0))

        try:
            # Load the logo image (expects 'Quill With Ink.png')
            self.original_logo_image = Image.open("Quill With Ink.png")
        except FileNotFoundError:
            print("Error: 'Quill With Ink.png' not found. A fallback will be used.")
            self.original_logo_image = Image.new('RGBA', (50, 50), (0, 0, 0, 0))
            draw = ImageDraw.Draw(self.original_logo_image)
            draw.text((10, 20), "Logo", fill=(100, 100, 100))

        try:
            # Load the 'LitLoom.png' image file.
            self.original_title_image = Image.open("LitLoom.png")
        except FileNotFoundError:
            print("Error: 'LitLoom.png' (title image) not found. A fallback will be used.")
            self.original_title_image = None

        # --- Canvas Setup ---
        self.canvas = tk.Canvas(self, highlightthickness=0)
        self.canvas.pack(fill="both", expand=True)

        # --- Event Binding ---
        self.bind("<Configure>", self.handle_resize)
        self.canvas.tag_bind("button", "<Button-1>", self.go_to_next_page)
        self.canvas.tag_bind("button", "<Enter>", self.on_button_hover)
        self.canvas.tag_bind("button", "<Leave>", self.on_button_leave)

        # Trigger the first draw
        self.redraw_canvas(force_redraw=True)

    def go_to_next_page(self, event=None):
        """Switches to the blank next page and redraws the screen."""
        self.current_page = "next"
        self.redraw_canvas(force_redraw=True)

    def on_button_hover(self, event=None):
        """Changes the cursor and animates the button on hover."""
        self.config(cursor="hand2")
        self.canvas.move("button", 2, 2)
        self.canvas.itemconfig("button_bg", fill=self.button_hover_color)

    def on_button_leave(self, event=None):
        """Changes the cursor and reverts button animation on leave."""
        self.config(cursor="")
        self.canvas.move("button", -2, -2)
        self.canvas.itemconfig("button_bg", fill=self.button_bg_color)

    def add_rounded_corners(self, img, radius):
        """Applies rounded corners to a PIL Image."""
        mask = Image.new('L', img.size, 0)
        draw = ImageDraw.Draw(mask)
        draw.rounded_rectangle((0, 0) + img.size, radius=radius, fill=255)
        img.putalpha(mask)
        return img

    def draw_rounded_rectangle(self, x1, y1, x2, y2, radius, **kwargs):
        """Draws a rounded rectangle on the canvas."""
        points = [
            x1 + radius, y1, x2 - radius, y1, x2, y1, x2, y1 + radius,
            x2, y2 - radius, x2, y2, x2 - radius, y2, x1 + radius, y2,
            x1, y2, x1, y2 - radius, x1, y1 + radius, x1, y1
        ]
        return self.canvas.create_polygon(points, **kwargs, smooth=True)

    def handle_resize(self, event):
        """Schedules a redraw after a brief delay to prevent lag."""
        if self.resize_job_id:
            self.after_cancel(self.resize_job_id)
        self.resize_job_id = self.after(50, self.redraw_canvas)

    def redraw_canvas(self, force_redraw=False):
        """Handles the actual redrawing of the canvas content."""
        win_width = self.winfo_width()
        win_height = self.winfo_height()

        if win_width < 2 or win_height < 2:
            return

        size_has_changed = (win_width != self.last_width or win_height != self.last_height)
        if not size_has_changed and not force_redraw:
            return

        self.canvas.delete("all")

        if self.current_page == "welcome":
            self.draw_welcome_page(win_width, win_height, size_has_changed)
        elif self.current_page == "next":
            self.draw_next_page(win_width, win_height)

        self.last_width = win_width
        self.last_height = win_height

    def draw_background(self, win_width, win_height, size_has_changed):
        """Draws the tiled background image for the welcome page."""
        if (size_has_changed or not self.bg_photo) and self.original_bg_image:
            bg_img_resized = self.original_bg_image.resize((win_width, win_height), Image.Resampling.LANCZOS)
            self.bg_photo = ImageTk.PhotoImage(bg_img_resized)

        if self.bg_photo:
            self.canvas.create_image(0, 0, image=self.bg_photo, anchor="nw")
        else:
            self.canvas.configure(bg="#FDFDFD")

    # --- MODIFIED FUNCTION ---
    def draw_next_page(self, win_width, win_height):
        """Draws the second page with a thin border for a 'zoomed-in' feel."""
        # --- 1. Set the background color for the entire page (the border) ---
        self.canvas.configure(bg="#B48C68")

        # --- 2. Define color for the main content area ---
        main_color = "#C7B6A4"  # The lighter brown color

        # --- 3. Calculate Dimensions for an almost full-screen Rectangle ---
        # This creates a thin border around the edge of the window.
        border_width = 20  # The width of the surrounding border in pixels
        rect_x1 = border_width
        rect_y1 = border_width
        rect_x2 = win_width - border_width
        rect_y2 = win_height - border_width

        # --- 4. Draw the large Rounded Rectangle ---
        self.draw_rounded_rectangle(
            rect_x1, rect_y1, rect_x2, rect_y2,
            radius=25,  # A radius for the corners
            fill=main_color,
            outline=""
        )

    def draw_welcome_page(self, win_width, win_height, size_has_changed):
        """Draws the initial welcome screen with all elements."""
        self.draw_background(win_width, win_height, size_has_changed)

        if (size_has_changed or not self.logo_photo) and self.original_logo_image:
            logo_img = self.original_logo_image.copy()
            logo_img.thumbnail((45, 45), Image.Resampling.LANCZOS)
            self.logo_photo = ImageTk.PhotoImage(logo_img)

        if self.logo_photo:
            self.canvas.create_image(50, 50, image=self.logo_photo, anchor="center")

        if (size_has_changed or not self.fg_photo) and self.original_fg_image:
            container_width = win_width * 0.85
            container_height = win_height * 0.75
            fg_img = self.original_fg_image.copy()
            fg_img.thumbnail((container_width, container_height), Image.Resampling.LANCZOS)
            fg_img_rounded = self.add_rounded_corners(fg_img.copy(), 30)
            self.fg_photo = ImageTk.PhotoImage(fg_img_rounded)

        if self.fg_photo:
            frame_x = win_width / 2
            frame_y = win_height * 0.55
            self.canvas.create_image(frame_x, frame_y, image=self.fg_photo)
        else:
            self.canvas.create_text(win_width / 2, win_height / 2, text="Foreground image not found",
                                    font=("Arial", 14), fill="red")
            return

        if (size_has_changed or not self.title_photo) and self.original_title_image:
            title_img = self.original_title_image.copy()
            max_title_width = win_width * 0.4
            title_img.thumbnail((max_title_width, 100), Image.Resampling.LANCZOS)
            self.title_photo = ImageTk.PhotoImage(title_img)

        if self.title_photo:
            title_y = win_height * 0.15
            self.canvas.create_image(win_width / 2, title_y, image=self.title_photo)
        else:
            title_y = win_height * 0.15
            self.canvas.create_text(
                win_width / 2, title_y, text="LitLoom",
                font=("Georgia", 32, "bold"), fill="#5D4A3A"
            )

        button_width = 200
        button_height = 50
        btn_center_x = win_width / 2
        btn_center_y = win_height * 0.55
        btn_x1 = btn_center_x - button_width / 2
        btn_y1 = btn_center_y - button_height / 2
        btn_x2 = btn_x1 + button_width
        btn_y2 = btn_y1 + button_height

        self.draw_rounded_rectangle(
            btn_x1, btn_y1, btn_x2, btn_y2,
            radius=25, fill=self.button_bg_color, outline="", tags=("button", "button_bg")
        )

        self.canvas.create_text(
            btn_center_x, btn_center_y,
            text="Let's Go!", font=("Helvetica", 16, "bold"), fill="white", tags="button"
        )


# --- Running the Application ---
if __name__ == "__main__":
    app = LitLoomApp()
    app.mainloop()
